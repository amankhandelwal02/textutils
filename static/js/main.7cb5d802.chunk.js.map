{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","style","height","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","title","id","cursor","onClick","toggleMode","htmlFor","modeText","TextForm","useState","text","setText","color","heading","subheading","value","backgroundColor","transition","onChange","event","console","log","target","rows","length","newText","showAlert","split","map","currentValue","join","navigator","clipboard","writeText","document","getSelection","removeAllRanges","filter","element","defaultProps","aboutText","App","setMode","setAlert","message","setTimeout","setModeText","cls","body","classList","remove","add","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7cb5d802.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        <div style={{height: '50px'}}>\r\n            {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            </div>}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" >{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        {/* <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li> */}\r\n                        {/* <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/About\">{props.aboutText}</Link>\r\n                        </li> */}\r\n                    </ul>\r\n                    {/* <div className=\"d-flex\">\r\n                        <div className=\"bg-primary rounded mx-2\" style={{height: '30px', width: '30px', cursor : 'pointer'}} onClick= {()=> {props.toggleMode('primary')}}></div>\r\n                        <div className=\"bg-success rounded mx-2\" style={{height: '30px', width: '30px', cursor : 'pointer'}} onClick= {()=> {props.toggleMode('success')}}></div>\r\n                        <div className=\"bg-danger rounded mx-2\" style={{height: '30px', width: '30px', cursor : 'pointer'}} onClick= {()=> {props.toggleMode('danger')}}></div>\r\n                        <div className=\"bg-warning rounded mx-2\" style={{height: '30px', width: '30px', cursor : 'pointer'}} onClick= {()=> {props.toggleMode('warning')}}></div>\r\n                    </div> */}\r\n                    <div className={`form-check form-switch text-${props.mode===\"light\"?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" style={{cursor : 'pointer'}} onClick={()=> {props.toggleMode(null)}} />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.modeText}</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    aboutText: 'Set about text here'\r\n}\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n  let handleUpClick = () => {\r\n    console.log(\"Handle upper case is clicked\" + text)\r\n    let newText = text.toUpperCase();\r\n    setText(newText)\r\n    props.showAlert(\"Converted to upper case\", \"success\");\r\n  }\r\n\r\n  let handleLowClick = () => {\r\n    console.log(\"Handle lower case is clicked\" + text)\r\n    let newText = text.toLowerCase();\r\n    setText(newText)\r\n    props.showAlert(\"Converted to lower case\", \"success\");\r\n  }\r\n\r\n  const handleTitleCase = () => {\r\n    let newText = text.split(\" \").map((currentValue) => {\r\n        let newText = currentValue[0].toUpperCase() + currentValue.slice(1);\r\n        return newText;\r\n    });\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Converted to title case\", \"success\");\r\n}\r\n\r\n  let handleExtraClick = () => {\r\n    console.log(\"Handle Extra space is clicked\" + text)\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra space has been removed\", \"success\");\r\n  }\r\n\r\n  \r\n  let handleCopyClick = () => {\r\n    console.log(\"Handle copy is clicked\" + text)\r\n    navigator.clipboard.writeText(text);\r\n    document.getSelection().removeAllRanges();\r\n    alert(`Text Copied To Clipboard - ${text}`)\r\n  }\r\n\r\n  let handleClearlick = () => {\r\n    console.log(\"Handle clear is clicked\" + text)\r\n    let newText = \"\";\r\n    setText(newText)\r\n    props.showAlert(\"Text cleared\", \"success\");\r\n  }\r\n\r\n  let handleOnChange = (event) => {\r\n    console.log(\"On change\")\r\n    setText(event.target.value)\r\n  }\r\n\r\n  const [text, setText] = useState('');\r\n  // text = \"new text\"; // Wrong way to change the state\r\n    // setText(\"new text\"); // Correct way to change the state\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{color : props.mode===\"dark\"?'white':'black'}}>\r\n          <h3>{props.heading}</h3>\r\n          <div className=\"mb-3\">\r\n            <label htmlFor=\"exampleFormControlTextarea1\" className=\"form-label\">{props.subheading}</label>\r\n            <textarea className=\"form-control\" value={text} style={{backgroundColor : props.mode===\"dark\"?'#212529':'white', color : props.mode===\"dark\"?'white':'black', transition: '0.6s'}} onChange={handleOnChange} id=\"exampleFormControlTextarea1\" rows=\"6\"></textarea>\r\n          </div>\r\n          <div className={`buttom btn btn-primary mx-1 my-1 ${text.length===0?'disabled':''}`} onClick={handleUpClick}>Convert To Uppercase</div>\r\n          <div className={`buttom btn btn-primary mx-1 my-1 ${text.length===0?'disabled':''}`} onClick={handleLowClick}>Convert To Lowercase</div>\r\n          <div className={`buttom btn btn-primary mx-1 my-1 ${text.length===0?'disabled':''}`} onClick={handleTitleCase}>Convert To Titlecase</div>\r\n          <div className={`buttom btn btn-primary mx-1 my-1 ${text.length===0?'disabled':''}`} onClick={handleExtraClick}>Remove Extra Space</div>\r\n          <div className={`buttom btn btn-primary mx-1 my-1 ${text.length===0?'disabled':''}`} onClick={handleCopyClick}>Copy To Clipboard</div>\r\n          <div className={`buttom btn btn-primary mx-1 my-1 ${text.length===0?'disabled':''}`} onClick={handleClearlick}>Clear Text</div>\r\n      </div>\r\n\r\n      <div className=\"container my-3\" style={{color : props.mode===\"dark\"?'white':'black'}}>\r\n\r\n        <h3>Here is the text summery</h3>\r\n        <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {text.length} charectors</p>\r\n        <p>{0.008 * text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} Minutes to read this</p>\r\n        \r\n        <h3>Your Text Preview</h3>\r\n        <p>{text.length>0?text:\"Enter something in the text box above to preview it here...\"}</p>\r\n\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nTextForm.propTypes = {\r\n  heading: PropTypes.string.isRequired,\r\n  subheading: PropTypes.string.isRequired,\r\n}\r\n\r\nTextForm.defaultProps = {\r\n  heading: \"Here comes a heading\",\r\n  subheading: \"Here comes a sub-heading\"\r\n}\r\n","import './App.css';\n// import About from './components/About';\nimport Alert from './components/Alert';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\n// import { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light')\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  }\n\n  const removeBodyClassess = ()=>{\n      document.body.classList.remove('bg-light')\n      document.body.classList.remove('bg-dark')\n      document.body.classList.remove('bg-success')\n      document.body.classList.remove('bg-warning')\n      document.body.classList.remove('bg-danger')\n  }\n\n  const [modeText, setModeText] = useState('Enable Dark Mode')\n\n  const toggleMode = (cls) => {\n    removeBodyClassess();\n    document.body.classList.add('bg-' +cls)\n    if (mode === \"light\") {\n      setMode(\"dark\")\n      document.body.style.backgroundColor = \"#6c757d\"\n      document.body.style.transition = \"0.6s\"\n      setModeText(\"Enable Light Mode\")\n      showAlert(\"Dark mode has been enabled\", \"success\")\n      document.title = 'React App - Dark Mode';\n\n    } else {\n      setMode(\"light\")\n      document.body.style.backgroundColor = \"white\"\n      document.body.style.transition = \"0.6s\"\n      setModeText(\"Enable Dark Mode\")\n      showAlert(\"Light mode has been enabled\", \"success\")\n      document.title = 'React App - Light Mode';\n    }\n  }\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar title=\"Text Utils\" aboutText=\"About Project\" mode={mode} toggleMode={toggleMode} modeText={modeText} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          {/* <Routes> */}\n            {/* <Route exact path=\"/\" element={<TextForm showAlert={showAlert} heading=\"Enter the text to analyse below\" subheading=\"Paste the text here to manipulate\" mode={mode}/>} /> */}\n            <TextForm showAlert={showAlert} heading=\"Enter the text to analyse below\" subheading=\"Paste the text here to manipulate\" mode={mode}/>\n            {/* <Route exact path=\"/About\" element={<About  mode={mode}/>} /> */}\n          {/* </Routes> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}